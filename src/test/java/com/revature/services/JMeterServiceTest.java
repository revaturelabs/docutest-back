package com.revature.services;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.fail;
import static org.mockito.ArgumentMatchers.anyInt;
import static org.mockito.Mockito.when;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;

import org.apache.jmeter.config.Arguments;
import org.apache.jmeter.control.LoopController;
import org.apache.jmeter.protocol.http.sampler.HTTPSamplerProxy;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.transaction.annotation.Transactional;

import com.revature.aspects.AspectLogger;
import com.revature.docutest.DocutestApplication;
import com.revature.docutest.TestUtil;
import com.revature.models.SwaggerDocutest;
import com.revature.models.SwaggerSummary;
import com.revature.templates.LoadTestConfig;

import io.swagger.models.Swagger;
import io.swagger.parser.SwaggerParser;

@SpringBootTest(classes = DocutestApplication.class)
@ContextConfiguration(classes = {JMeterService.class, AspectLogger.class})
@ExtendWith(SpringExtension.class)
@Transactional
class JMeterServiceTest {

    @Autowired
    @InjectMocks
    private JMeterService jm;
    
    private LoadTestConfig loadConfig = new LoadTestConfig();

    @Mock
    private SwaggerSummaryService sss;
    @Mock
    private S3CSVService s3Service;
    
    @Autowired
    private static OASService adapter;

    private SwaggerDocutest testSpecs;
    
    @BeforeAll
    static void setUpBeforeClass() throws Exception {
    }

    @AfterAll
    static void tearDownAfterClass() throws Exception {
    }

    @BeforeEach
    void setUp() throws Exception {
        // need a new one so the autogenerated ids reset to 1 for each test
        adapter = new OASService(new JSONStringCreator());
        
        
        loadConfig.setLoops(1);
        loadConfig.setRampUp(2);
        loadConfig.setThreads(10);
        loadConfig.setDuration(-1);
        loadConfig.setTestPlanName("JMeterServicesTest");
        
        TestUtil.initFields();
        MockitoAnnotations.initMocks(this);
        
        when(sss.getById(anyInt())).thenReturn(Optional.of(new SwaggerSummary()));
    }

    @AfterEach
    void tearDown() throws Exception {
    }

    @Test
    void testLoadTestingLoop() {
        testSpecs = new SwaggerDocutest(adapter.getRequests(TestUtil.get));
        loadConfig.setLoops(2);
        int expectedReq = (loadConfig.getLoops() * loadConfig.getThreads());

        List<byte[]> fileList = jm.loadTesting(testSpecs, loadConfig, 1);
        InputStream is = new ByteArrayInputStream(fileList.get(0));

        try (BufferedReader reader = new BufferedReader(new InputStreamReader(is))) {
            int counter = getCounter(reader);
            System.out.println("Expected Request Count: " + expectedReq);
            System.out.println("Actual Request Count: " + counter);
            assertEquals(expectedReq, counter);
        } catch (IOException e) {
            e.printStackTrace();
            fail();
        }
    }

    @Test
    void testLoadTestingLoopMultiReq() {
        testSpecs = new SwaggerDocutest(adapter.getRequests(TestUtil.multi));
        loadConfig.setLoops(2);
        
        int numTests = 2;
        int expectedReq = (loadConfig.getLoops() * loadConfig.getThreads());
        
        List<byte[]> fileList = jm.loadTesting(testSpecs, loadConfig, 1);

        for (int i = 0; i < numTests; i++) {            
            InputStream is = new ByteArrayInputStream(fileList.get(i));
            
            try (BufferedReader reader = new BufferedReader(new InputStreamReader(is))) {
                int counter = getCounter(reader);
                System.out.println("Expected Request Count: " + expectedReq);
                System.out.println("Actual Request Count: " + counter);
                assertEquals(expectedReq, counter);
            } catch (IOException e) {
                e.printStackTrace();
                fail();
            }
        }

    }

    @Test
    void testLoadTestingDuration() throws IOException {
        testSpecs = new SwaggerDocutest(adapter.getRequests(TestUtil.get));
        loadConfig.setDuration(3);
        loadConfig.setLoops(-1);

        List<byte[]> fileList = jm.loadTesting(testSpecs, loadConfig, 1);
        InputStream is = new ByteArrayInputStream(fileList.get(0));

        try (BufferedReader reader = new BufferedReader(new InputStreamReader(is))) {
            long diff = getDiff(reader);
            // flat amount + 5% of duration in ms
            System.out.println("Difference between expected and actual duration (ms): "
                    + Math.abs((loadConfig.getDuration() * 1000) - diff));
            assertTrue(Math
                    .abs((loadConfig.getDuration() * 1000) - diff) < (2000 + (loadConfig.getDuration() * 1000 / 20)));
        } catch (IOException e) {
            e.printStackTrace();
            fail();
        }
    }

    @Test
    void testLoadTestingDurationMulti() {
        testSpecs = new SwaggerDocutest(adapter.getRequests(TestUtil.multi));
        loadConfig.setDuration(3);
        loadConfig.setLoops(-1);

        List<byte[]> fileList = jm.loadTesting(testSpecs, loadConfig, 1);

        for (int i = 0; i < 2; i++) {
            InputStream is = new ByteArrayInputStream(fileList.get(i));

            try (BufferedReader reader = new BufferedReader(new InputStreamReader(is))) {
                long diff = getDiff(reader);
                long expectedDuration = loadConfig.getDuration() * 1000;
                System.out.println(
                        "Difference between expected and actual duration (ms): " + Math.abs(expectedDuration - diff));
                System.out.println(diff);
                // flat amount + 5% of duration in ms
                assertTrue(Math.abs((expectedDuration) - diff) < (2000 + (loadConfig.getDuration() * 1000 / 20)));
            } catch (IOException e) {
                e.printStackTrace();
                fail();
            }
        }

    }

    @Test
    void testHttpSamplerDistinctRequestCount() {
        testSpecs = new SwaggerDocutest(adapter.getRequests(TestUtil.get));
        List<HTTPSamplerProxy> samplers = jm.createHTTPSamplerProxy(testSpecs);
        assertEquals(1, samplers.size());
        testSpecs = new SwaggerDocutest(adapter.getRequests(TestUtil.todos));
        samplers = jm.createHTTPSamplerProxy(testSpecs);
        assertEquals(7, samplers.size());
    }

    @Test
    void testHttpSamplerEndpoints() {
        testSpecs = new SwaggerDocutest(adapter.getRequests(TestUtil.get));
        // get.json
        Set<String> expected = new HashSet<>();
        expected.add("/");
        List<HTTPSamplerProxy> samplers = jm.createHTTPSamplerProxy(testSpecs);
        for (HTTPSamplerProxy sampler : samplers) {
            assertTrue(expected.contains(sampler.getPath()));
        }
        testSpecs = new SwaggerDocutest(adapter.getRequests(TestUtil.todos));
        // todos.json
        expected.clear();
        expected.add("/todos");
        expected.add("/todos/truncate");
        expected.add("/todos/1"); 
        samplers = jm.createHTTPSamplerProxy(testSpecs);

        for (HTTPSamplerProxy sampler : samplers) {
            assertTrue(expected.contains(sampler.getPath()));
        }
    }

    @Test
    void testHttpSamplerNull() {
        assertEquals(0, jm.createHTTPSamplerProxy(null).size());
    }

    @Test
    void testHttpSamplerNoReq() {
        testSpecs = new SwaggerDocutest(adapter.getRequests(TestUtil.blank));
        assertEquals(0, jm.createHTTPSamplerProxy(testSpecs).size());
    }

    @Test
    void testHttpSamplerNoHost() {
        testSpecs = new SwaggerDocutest(adapter.getRequests(TestUtil.malformed));
        assertEquals(0, jm.createHTTPSamplerProxy(testSpecs).size());
    }

    @Test
    void testCreateLoopController() {
        testSpecs = new SwaggerDocutest(adapter.getRequests(TestUtil.todos));
        List<HTTPSamplerProxy> samplerSet = jm.createHTTPSamplerProxy(testSpecs);
        for (HTTPSamplerProxy element : samplerSet) {
            LoopController testLC = (LoopController) jm.createLoopController(element, loadConfig.getLoops());
            assertEquals(loadConfig.getLoops(), testLC.getLoops());
            // way to check loadconfig elements?
        }

    }

    @Test
    void testCreateLoopControllerNull() {
        assertNull(jm.createLoopController(null, loadConfig.getLoops()));
    }
    
    // ---------------- Body Tests -------------------
    @Test
    void testObjectCreatorSimplePost() {
        testSpecs = new SwaggerDocutest(adapter.getRequests(TestUtil.post));
        List<HTTPSamplerProxy> samplers = jm.createHTTPSamplerProxy(testSpecs);
        
        for (HTTPSamplerProxy element : samplers) {
            Arguments args = element.getArguments();
            Map<String, String> argsMap = args.getArgumentsAsMap();
            String bodyText = argsMap.get("").replaceAll("\\s", "");     
            String expected = TestUtil.POST_OBJ_JSON.replaceAll("\\s", "");

            if (!argsMap.isEmpty()) {
                assertEquals(expected, bodyText);
            } else {
                assertNull(bodyText);
            }
        }

    }
    
    @Test
    void testObjectCreatorHTTPSamplerProxy() {
        testSpecs = new SwaggerDocutest(adapter.getRequests(TestUtil.petstore));
        List<HTTPSamplerProxy> samplers = jm.createHTTPSamplerProxy(testSpecs);
        for (HTTPSamplerProxy element : samplers) {
            Arguments args = element.getArguments();
            Map<String, String> argsMap = args.getArgumentsAsMap();
            String bodyText = argsMap.get("");            

            if (!argsMap.isEmpty()) {
                // argsMap returns a string with "null" if no valid values
                assertNotEquals("null",bodyText);
            } else {
                assertNull(bodyText);
            }
        }
    }
    
    @Disabled
    @Test
    void sanityCheck() {
        // for use with wireshark to check req structure
        Swagger p2 = new SwaggerParser().read("src/test/resources/project2.json");
        testSpecs = new SwaggerDocutest(adapter.getRequests(p2));
        loadConfig.setLoops(2);
        jm.loadTesting(testSpecs, loadConfig, 0);
    }

    // ------------------------------ HELPER METHODS ---------------------------------

    // helper method for duration tests to get difference between latest starttime
    // and initial starttime, in ms
    public static long getDiff(BufferedReader reader) throws NumberFormatException, IOException {
        String dat;
        int counter = 0;
        long startTime = 0;
        String[] row = new String[3];
        while ((dat = reader.readLine()) != null) {
            if (counter != 0) {
                row = dat.split(",");

                String timestamp = row[0];
                if (counter == 1) {
                    startTime = Long.parseLong(timestamp.replaceAll("\"",""));
                }
            }
            counter++;
        }
        return Long.parseLong(row[0].replaceAll("\"", "")) - startTime;
    }

    // helper method to get number of httprequests sent for loop-based tests
    public static int getCounter(BufferedReader reader) throws IOException {
        int counter = 0;
        // number of distinct req
        // may need to revisit once S3 is implemented

        while (reader.readLine() != null) {
            counter++;
        }
        counter--; // decrement for header line
        return counter;
    }
}
