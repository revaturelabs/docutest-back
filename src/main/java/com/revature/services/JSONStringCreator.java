package com.revature.services;

import java.util.Map;

import io.swagger.models.Model;
import io.swagger.models.properties.ArrayProperty;
import io.swagger.models.properties.Property;
import io.swagger.models.properties.RefProperty;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Service;

@Service
@Scope("prototype")
public class JSONStringCreator {
    private static final Logger log = LogManager.getLogger(JSONStringCreator.class);

    /**
     * For OAS 2.0, recursively creates a JSON string representation of an object
     * found in the definitions section of a Swagger object. Default values are:
     * Integer: 1, number: 0, string: "autogeneratedstring, Boolean: false, Array: array 
     * with single element of specified type.
     * 
     * @param definitionKey String key of the definitions object corresponding to
     *                      the name of the object
     * @param definitions   Definitions object from Swagger object.
     * @return String representation of object found in definitions. Empty object
     *         "{}" if null.
     */
    public String createDefaultJSONString(String definitionKey, Map<String, Model> definitions) {

        if (definitionKey != null && definitions != null) {
            Model obj = definitions.get(definitionKey);

            if (obj != null) {
                Map<String, Property> fields = obj.getProperties();
                String returnString = "{";

                for (Map.Entry<String, Property> fieldEntry : fields.entrySet()) {
                    String field = fieldEntry.getKey();
                    Property p = fieldEntry.getValue();
                    String dataType = p.getType();

                    returnString += appendString(dataType, field, definitions, p);

                }
                
                // remove trailing comma
                returnString = returnString.substring(0, returnString.length() - 1);
                return returnString + "}";
            }
        }

        return "{}";
    }

    // -------------------------- HELPER METHODS -----------------------------
    private String appendString(String dataType, String field, Map<String, Model> definitions, Property p) {
        String returnString = "";

        switch (dataType) {
        case "boolean":
            returnString += "\"" + field + "\" : \"" + false + "\",";
            break;

        case "string":
            returnString += "\"" + field + "\" : \"autogeneratedstring\",";
            break;

        case "number":
            returnString += "\"" + field + "\" : \"" + 0 + "\",";
            break;

        case "integer":
            returnString += "\"" + field + "\" : \"" + 1 + "\",";
            break;

        case "array":
            // check type of array
            String arrayType = ((ArrayProperty) p).getItems().getType();

            // array of objects
            // add single object
            if (arrayType.equals("ref")) {
                RefProperty itemProperty = (RefProperty) ((ArrayProperty) p).getItems();
                String name = itemProperty.getSimpleRef();
                returnString += "\"" + field + "\" : [" + createDefaultJSONString(name, definitions) + "],";
            } else if (arrayType.equals("string")) {
                // add quotes around string arrays
                returnString += "\"" + field + "\" : [\"" + primitiveDefault(arrayType) + "\"],";
            } else {
                returnString += "\"" + field + "\" : [" + primitiveDefault(arrayType) + "],";
            }
            break;

        case "ref":
            // object referenced
            String name = ((RefProperty) p).getSimpleRef();
            returnString += "\"" + field + "\" : " + createDefaultJSONString(name, definitions) + ",";
            break;

        default:
            log.trace("No valid data type found for appendString. dataType = {}", dataType);
        }

        return returnString;
    }

    public static String primitiveDefault(String dataType) {
        String returnString = "";
        switch (dataType) {
        case "boolean":
            returnString += "false";
            break;

        case "string":
            returnString += "autogeneratedstring";
            break;

        case "number":
            returnString += "0";
            break;

        case "integer":
            returnString += "1";
            break;
        default:
            break;
        }
        return returnString;
    }

}
